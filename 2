
using CodeGenerationPlayground.CodeGenerators;
using CodeGenerationPlayground.GeneratorModels;
using CodeGenerationPlayground.Helpers;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Emit;
using System.Reflection;
using System.Runtime.Loader;

var unit = DefaultCodeGenerator.CreateCompilationUnit();

var defaultNamespace = DefaultCodeGenerator.CreateNamespace("AutoGeneratedTest");

var method = new MethodDescriptor
{
    Modifiers = SyntaxFactory.TokenList(SyntaxFactory.Token(SyntaxKind.PublicKeyword), SyntaxFactory.Token(SyntaxKind.StaticKeyword)),
    Identifier = SyntaxFactory.Identifier("TestMethod"),
    //ExplicitInterfaceSpecifier = SyntaxFactory.ExplicitInterfaceSpecifier(SyntaxFactory.IdentifierName(" ")), 
    Parameters = SyntaxFactory.ParameterList(SyntaxFactory.SeparatedList<ParameterSyntax>(new List<ParameterSyntax>{
        SyntaxFactory.Parameter(SyntaxFactory.List<AttributeListSyntax>(), SyntaxFactory.TokenList(), SyntaxFactory.ParseTypeName(nameof(String)), SyntaxFactory.Identifier("param1"), null) 
    })),
    ReturnType = SyntaxFactory.ParseTypeName(nameof(String)),
    Body = SyntaxFactory.Block(SyntaxFactory.List(new List<StatementSyntax> { 
        SyntaxFactory.ReturnStatement(SyntaxFactory.ParseExpression("\"auto generated\"")) 
    })),
};

var model = DefaultCodeGenerator.CreateClass(new ClassModel
{
    Name = "TestGenerationClass",
    Modifiers = "public static",
}, new List<MemberDeclarationSyntax> { 
    DefaultCodeGenerator.CreateMethod(method),
});

defaultNamespace = defaultNamespace
    .AddUsings(SyntaxFactory.UsingDirective(SyntaxFactory.IdentifierName("System")))
    .AddMembers(model);

unit = unit.AddMembers(defaultNamespace);

var tree = DefaultCodeGenerator.CreateTree(unit);

Console.WriteLine("Analysis of AutoGeneratedCode");
Console.WriteLine();
var root = tree.GetCompilationUnitRoot();
Console.WriteLine($"The tree is a {root.Kind()} node.");
Console.WriteLine();
Console.WriteLine();
Console.WriteLine($"The tree has {root.Members.Count} elements in it.");

Console.WriteLine(unit.NormalizeWhitespace().ToFullString());

Console.WriteLine();
Console.WriteLine();
Console.WriteLine();
Console.WriteLine($"The tree has {root.Usings.Count} using statements. They are:");
foreach (UsingDirectiveSyntax element in root.Usings)
    Console.WriteLine($"\t{element.Name}");

var systemRefLocation = typeof(object).GetTypeInfo().Assembly.Location;
var systemReference = MetadataReference.CreateFromFile(systemRefLocation);

var filename = "autogen1.dll";
var compilation = CSharpCompilation.Create(filename)
    .WithOptions(new(OutputKind.DynamicallyLinkedLibrary))
    .AddReferences(systemReference)
    .AddSyntaxTrees(unit.SyntaxTree);

string path = Path.Combine(Directory.GetCurrentDirectory(), filename);

EmitResult compilationResult = compilation.Emit(path);
if (compilationResult.Success)
{
    Assembly asm = AssemblyLoadContext.Default.LoadFromAssemblyPath(path);
    Type testType = asm.GetType("RoslynCore.Helper");
    MethodInfo testMethod = testType.GetMethod("TestMethod");
    object? result = testMethod.Invoke(null, null);
    Console.WriteLine($"{result as string}");
}
else
{
    DiagnosticHelper.PrintDiagnostics(compilationResult.Diagnostics);
}

Console.ReadLine();
